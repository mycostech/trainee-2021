{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/components/EditEventForm/EditEventForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { editEvent, getEventDetail } from '../../Action/EventAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction EditEventForm() {\n  _s();\n\n  const history = useHistory();\n  const {\n    eventId\n  } = useParams();\n  const dispatch = useDispatch();\n  const event = useSelector(state => state.EventReducer);\n  const user = useSelector(state => state.UserReducer);\n  const auth = useSelector(state => state.AuthReducer);\n  console.log(\"eventId, \", Number(eventId));\n  const [count, setCount] = useState(0);\n  const [_dateTime, setDateTime] = useState();\n  const [_eventname, setEventName] = useState('');\n  const [_memo, setMemo] = useState('');\n\n  const onSubmitForm = () => {\n    if (user.getsuccess && auth.logingIn) {\n      var _user$userInfo;\n\n      let newEvent = {\n        dateTime: _dateTime,\n        eventName: _eventname,\n        memo: _memo,\n        userId: (_user$userInfo = user.userInfo) === null || _user$userInfo === void 0 ? void 0 : _user$userInfo.id\n      };\n      console.log(\"event ID ==> \", eventId);\n      console.log(newEvent);\n      dispatch(editEvent(Number(eventId), newEvent));\n    }\n  };\n\n  useEffect(() => {\n    if (count === 0) {\n      var _event$event, _event$event2, _event$event3;\n\n      dispatch(getEventDetail(Number(eventId)));\n      console.log(\"event name ==> \", _eventname);\n      setDateTime((_event$event = event.event) === null || _event$event === void 0 ? void 0 : _event$event.dateTime);\n      setEventName((_event$event2 = event.event) === null || _event$event2 === void 0 ? void 0 : _event$event2.eventName);\n      setMemo((_event$event3 = event.event) === null || _event$event3 === void 0 ? void 0 : _event$event3.memo);\n    }\n\n    if (event.updateSuccess) {\n      history.push('/events');\n    }\n\n    setCount(1);\n    return () => {\n      console.log(\"edit terminate\");\n    };\n  }, [setDateTime, setEventName, setMemo, setCount, dispatch, event]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: count == 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"link\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/events\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: event.loading && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading ...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Date Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          value: _dateTime,\n          onChange: e => {\n            setDateTime(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EditEventForm, \"hxJHOoHD8vlLNFcZOS9F8FN6T8s=\", false, function () {\n  return [useHistory, useParams, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = EditEventForm;\nexport default EditEventForm;\n{\n  /* <Link to=\"/events\">\n                     <a>Back</a>\n                 </Link>\n                 {event.loading &&\n                     <p>Loading ...</p>\n                 }\n                 <div className=\"addEvent-container\">\n                     <h3>New info</h3>\n                     <hr/>\n                     <div className=\"addEventform\">\n                          <div>\n                             <div><label>date time</label></div>\n                             <div><label>Event Name</label></div>\n                             <div><label>Memo</label></div>\n                         </div>\n                         \n                         <div>\n                             <div>\n                                 <input type=\"datetime-local\" value={_dateTime} onChange={\n                                     e => {\n                                         setDateTime(e.target.value)\n                                     }\n                                 }/>\n                             </div>\n                             <div>\n                                 <input type=\"text\" value={_eventname} onChange={\n                                     e => {\n                                         setEventName(e.target.value)\n                                     }\n                                 }/>\n                             </div>\n                             <div>\n                                 <textarea value={_memo} onChange={\n                                     e => {\n                                         setMemo(e.target.value)\n                                     }\n                                 }></textarea>\n                             </div>\n                         </div>\n                     </div>\n                 </div>\n                  <div className=\"addformbtn-container\">\n                     <button onClick={onSubmitForm}>Submit</button>\n                 </div> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"EditEventForm\");","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/components/EditEventForm/EditEventForm.tsx"],"names":["React","useEffect","useState","Link","useHistory","useParams","useDispatch","useSelector","editEvent","getEventDetail","EditEventForm","history","eventId","dispatch","event","state","EventReducer","user","UserReducer","auth","AuthReducer","console","log","Number","count","setCount","_dateTime","setDateTime","_eventname","setEventName","_memo","setMemo","onSubmitForm","getsuccess","logingIn","newEvent","dateTime","eventName","memo","userId","userInfo","id","updateSuccess","push","loading","e","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {Link, useHistory, useParams}  from 'react-router-dom'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../Reducer'\nimport { editEvent, getEventDetail } from '../../Action/EventAction';\nimport { IEvent } from '../../model/IEventType';\n\nfunction EditEventForm(){\n\n    const history = useHistory();\n    const {eventId} = useParams<{eventId?: string}>();\n    const dispatch = useDispatch()\n\n    const event = useSelector((state: RootState) => state.EventReducer)\n    const user = useSelector((state: RootState) => state.UserReducer)\n    const auth = useSelector((state: RootState) => state.AuthReducer)\n    \n    console.log(\"eventId, \",Number(eventId))\n\n    const [count, setCount] = useState<number>(0);\n    const [_dateTime, setDateTime] = useState<any>();\n    const [_eventname, setEventName] = useState<string | undefined>('');\n    const [_memo, setMemo] = useState<string | undefined>('');\n    \n\n    const onSubmitForm = () => {\n\n        if(user.getsuccess && auth.logingIn){\n\n            let newEvent: IEvent = {\n                dateTime: _dateTime,\n                eventName: _eventname,\n                memo: _memo,\n                userId: user.userInfo?.id\n            }\n            console.log(\"event ID ==> \",eventId)\n            console.log(newEvent)\n\n            dispatch(editEvent(Number(eventId), newEvent))\n        }\n    }\n\n    useEffect(() => {\n        \n        if(count === 0){\n\n            dispatch(getEventDetail(Number(eventId)))\n\n            console.log(\"event name ==> \",_eventname)\n            setDateTime(event.event?.dateTime)\n            setEventName(event.event?.eventName)\n            setMemo(event.event?.memo)\n            \n        }\n\n        if(event.updateSuccess ){\n            history.push('/events')\n        }\n        \n        setCount(1)\n\n        return () => {\n            \n            console.log(\"edit terminate\")\n        }\n\n    }, [setDateTime, setEventName, setMemo, setCount, dispatch, event])\n        \n    return (\n        <div>{count == 1 &&\n            <>\n\n                <div className=\"container\">\n\n                    <div className=\"link\">\n                        <Link to=\"/events\">\n                            <a>Back</a>\n                        </Link>\n                    </div>\n\n                    <h2>Edit Event</h2>\n                    \n                    <hr/>\n\n                    <div>\n                        {event.loading &&\n                            <p>Loading ...</p>\n                        }\n                    </div>\n\n                    <div>Date Time</div>\n                    <input type=\"datetime-local\" value={_dateTime} onChange={\n                        e => {setDateTime(e.target.value)\n                                    }\n                                }/>\n\n\n\n                </div>\n                \n            </>\n        }\n            \n        </div>\n    )\n}\n\nexport default EditEventForm\n\n{/* <Link to=\"/events\">\n                    <a>Back</a>\n                </Link>\n                {event.loading &&\n                    <p>Loading ...</p>\n                }\n                <div className=\"addEvent-container\">\n                    <h3>New info</h3>\n                    <hr/>\n                    <div className=\"addEventform\">\n\n                        <div>\n                            <div><label>date time</label></div>\n                            <div><label>Event Name</label></div>\n                            <div><label>Memo</label></div>\n                        </div>\n                        \n                        <div>\n                            <div>\n                                <input type=\"datetime-local\" value={_dateTime} onChange={\n                                    e => {\n                                        setDateTime(e.target.value)\n                                    }\n                                }/>\n                            </div>\n                            <div>\n                                <input type=\"text\" value={_eventname} onChange={\n                                    e => {\n                                        setEventName(e.target.value)\n                                    }\n                                }/>\n                            </div>\n                            <div>\n                                <textarea value={_memo} onChange={\n                                    e => {\n                                        setMemo(e.target.value)\n                                    }\n                                }></textarea>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"addformbtn-container\">\n                    <button onClick={onSubmitForm}>Submit</button>\n                </div> */}"]},"metadata":{},"sourceType":"module"}