{"ast":null,"code":"import { IUserActionType } from '../model/IUserType';\nimport axios from 'axios';\nimport { IAuthActionType } from '../model/IAuthType';\nconst API = process.env.REACT_APP_APP_URL;\n\nconst login = loginForm => async dispatch => {\n  let api = API + `api/auth/login`;\n  dispatch({\n    type: IUserActionType.GET_USER_START\n  });\n  dispatch({\n    type: IAuthActionType.LOGIN_REQUEST\n  });\n\n  try {\n    let userLogin = {\n      email: loginForm.email,\n      password: loginForm.password\n    };\n    await axios({\n      url: api,\n      method: 'POST',\n      data: userLogin\n    }).then(res => {\n      console.log('set user into localstorage');\n      localStorage.setItem('user', JSON.stringify(res.data));\n      dispatch({\n        type: IUserActionType.GET_USER_SUCCESS\n      });\n      dispatch({\n        type: IAuthActionType.LOGIN_SUCCESS,\n        user\n      });\n    });\n  } catch (err) {\n    dispatch({\n      type: IUserActionType.GET_USER_ERROR\n    });\n    dispatch({\n      type: IAuthActionType.LOGIN_FAILURE\n    });\n  }\n};\n\nconst logout = () => async dispatch => {\n  localStorage.removeItem('user');\n  dispatch({\n    type: IAuthActionType.LOGOUT\n  });\n};\n\nexport { login, logout };","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/Action/UserAction.ts"],"names":["IUserActionType","axios","IAuthActionType","API","process","env","REACT_APP_APP_URL","login","loginForm","dispatch","api","type","GET_USER_START","LOGIN_REQUEST","userLogin","email","password","url","method","data","then","res","console","log","localStorage","setItem","JSON","stringify","GET_USER_SUCCESS","LOGIN_SUCCESS","user","err","GET_USER_ERROR","LOGIN_FAILURE","logout","removeItem","LOGOUT"],"mappings":"AACA,SAASA,eAAT,QAAoD,oBAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AAIA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAxB;;AAEA,MAAMC,KAAK,GAAIC,SAAD,IAA2B,MAAMC,QAAN,IAAkC;AAEvE,MAAIC,GAAG,GAAGP,GAAG,GAAI,gBAAjB;AACAM,EAAAA,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAEX,eAAe,CAACY;AAAvB,GAAD,CAAR;AACAH,EAAAA,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAET,eAAe,CAACW;AAAvB,GAAD,CAAR;;AAEA,MAAI;AACA,QAAIC,SAAS,GAAG;AACZC,MAAAA,KAAK,EAAEP,SAAS,CAACO,KADL;AAEZC,MAAAA,QAAQ,EAAER,SAAS,CAACQ;AAFR,KAAhB;AAKA,UAAMf,KAAK,CAAC;AACRgB,MAAAA,GAAG,EAAEP,GADG;AAERQ,MAAAA,MAAM,EAAE,MAFA;AAGRC,MAAAA,IAAI,EAAEL;AAHE,KAAD,CAAL,CAIHM,IAJG,CAKFC,GAAG,IAAI;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeN,GAAG,CAACF,IAAnB,CAA7B;AAEAV,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAACX,eAAe,CAAC4B;AAAtB,OAAD,CAAR;AACAnB,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAACT,eAAe,CAAC2B,aAAtB;AACLC,QAAAA;AADK,OAAD,CAAR;AAGH,KAbC,CAAN;AAeH,GArBD,CAqBC,OAAOC,GAAP,EAAY;AACTtB,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEX,eAAe,CAACgC;AAAvB,KAAD,CAAR;AACAvB,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAET,eAAe,CAAC+B;AAAvB,KAAD,CAAR;AACH;AAEJ,CAhCD;;AAkCA,MAAMC,MAAM,GAAG,MAAM,MAAMzB,QAAN,IAAkC;AAEnDe,EAAAA,YAAY,CAACW,UAAb,CAAwB,MAAxB;AACA1B,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAET,eAAe,CAACkC;AAAxB,GAAD,CAAR;AACH,CAJD;;AAMA,SACI7B,KADJ,EAEI2B,MAFJ","sourcesContent":["import { Dispatch } from 'react'\nimport { IUserActionType, IUserAction, IUser } from '../model/IUserType';\nimport axios from 'axios'\nimport { IAuthActionType } from '../model/IAuthType';\nimport { ILoginForm } from '../model/ILoginForm';\n\n\nconst API = process.env.REACT_APP_APP_URL\n\nconst login = (loginForm: ILoginForm) => async(dispatch: Dispatch<any>) => {\n\n    let api = API + `api/auth/login`\n    dispatch({type: IUserActionType.GET_USER_START})\n    dispatch({type: IAuthActionType.LOGIN_REQUEST})\n    \n    try {\n        let userLogin = {\n            email: loginForm.email,\n            password: loginForm.password\n        }\n\n        await axios({\n            url: api,\n            method: 'POST',\n            data: userLogin\n        }).then(\n            res => {\n                console.log('set user into localstorage')\n                localStorage.setItem('user', JSON.stringify(res.data))\n\n                dispatch({type:IUserActionType.GET_USER_SUCCESS})\n                dispatch({type:IAuthActionType.LOGIN_SUCCESS,\n                    user\n                })\n            })\n        \n    }catch (err) {\n        dispatch({type: IUserActionType.GET_USER_ERROR})\n        dispatch({type: IAuthActionType.LOGIN_FAILURE})\n    }\n\n}\n\nconst logout = () => async(dispatch: Dispatch<any>) => {\n\n    localStorage.removeItem('user')\n    dispatch({ type: IAuthActionType.LOGOUT })\n}\n\nexport {\n    login,\n    logout\n}"]},"metadata":{},"sourceType":"module"}