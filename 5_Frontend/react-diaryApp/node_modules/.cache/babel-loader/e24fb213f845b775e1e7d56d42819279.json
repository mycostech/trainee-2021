{"ast":null,"code":"import { IUserActionType } from '../model/IUserType';\nimport axios from 'axios';\nimport { IAuthActionType } from '../model/IAuthType';\nconst API = process.env.REACT_APP_APP_URL;\n\nconst register = registerForm => async dispatch => {\n  let api = API + `api/auth/register`;\n  dispatch({\n    type: IUserActionType.ADD_USER_START\n  });\n\n  try {\n    let userRegister = {\n      fname: registerForm.fname,\n      lname: registerForm.lname,\n      nickname: registerForm.nickname,\n      email: registerForm.email,\n      password: registerForm.password,\n      birthdate: registerForm.birthdate\n    };\n    let bodyFormDate = new FormData();\n    bodyFormDate.append('Fname', registerForm.fname);\n    bodyFormDate.append('Lname', registerForm.lname);\n    bodyFormDate.append('Nicknamename', registerForm.nickname);\n    bodyFormDate.append('Email', registerForm.email);\n    bodyFormDate.append('Password', registerForm.password);\n    bodyFormDate.append('Birthdate', registerForm.birthdate);\n    console.log('==> ', userRegister);\n    await axios({\n      url: api,\n      method: 'POST',\n      data: userRegister\n    }).then(res => {\n      dispatch({\n        type: IUserActionType.ADD_USER_SUCCESS,\n        payload: res.data\n      });\n      dispatch({\n        type: IUserActionType.ADD_USER_END\n      });\n      window.alert('Register success');\n    });\n  } catch (err) {\n    dispatch({\n      type: IUserActionType.ADD_USER_ERROR,\n      payload: err\n    });\n    window.alert(err);\n  }\n};\n\nconst login = loginForm => async dispatch => {\n  let api = API + `api/auth/login`;\n  dispatch({\n    type: IUserActionType.GET_USER_START\n  });\n  dispatch({\n    type: IAuthActionType.LOGIN_REQUEST\n  });\n\n  try {\n    let userLogin = {\n      email: loginForm.email,\n      password: loginForm.password\n    };\n    await axios({\n      url: api,\n      method: 'POST',\n      data: userLogin\n    }).then(res => {\n      dispatch({\n        type: IUserActionType.GET_USER_SUCCESS,\n        payload: res.data\n      });\n      dispatch({\n        type: IAuthActionType.LOGIN_SUCCESS,\n        payload: res.data\n      });\n    });\n  } catch (err) {\n    dispatch({\n      type: IUserActionType.GET_USER_ERROR,\n      error: err\n    });\n    dispatch({\n      type: IAuthActionType.LOGIN_FAILURE,\n      error: err\n    });\n    window.alert('email or password incorrect');\n  }\n};\n\nconst logout = () => async dispatch => {\n  if (window.confirm('logout')) {\n    dispatch({\n      type: IAuthActionType.LOGOUT\n    });\n    dispatch({\n      type: IUserActionType.GET_USER_ERROR\n    });\n  }\n};\n\nexport { login, logout, register };","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/Action/UserAction.ts"],"names":["IUserActionType","axios","IAuthActionType","API","process","env","REACT_APP_APP_URL","register","registerForm","dispatch","api","type","ADD_USER_START","userRegister","fname","lname","nickname","email","password","birthdate","bodyFormDate","FormData","append","console","log","url","method","data","then","res","ADD_USER_SUCCESS","payload","ADD_USER_END","window","alert","err","ADD_USER_ERROR","login","loginForm","GET_USER_START","LOGIN_REQUEST","userLogin","GET_USER_SUCCESS","LOGIN_SUCCESS","GET_USER_ERROR","error","LOGIN_FAILURE","logout","confirm","LOGOUT"],"mappings":"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","sourcesContent":["import { Dispatch } from 'react'\nimport { IUserActionType, IUserAction, IUser } from '../model/IUserType';\nimport axios from 'axios'\nimport { IAuthActionType } from '../model/IAuthType';\nimport { ILoginForm } from '../model/ILoginForm';\nimport { IRegisterForm } from '../model/IRegisterForm';\n\n\nconst API = process.env.REACT_APP_APP_URL\n\nconst register = (registerForm: IRegisterForm) => async(dispatch: Dispatch<any>) => {\n\n    let api = API + `api/auth/register`\n    dispatch({ type: IUserActionType.ADD_USER_START })\n    \n    try{    \n        let userRegister: IRegisterForm = {\n            fname: registerForm.fname,\n            lname: registerForm.lname,\n            nickname: registerForm.nickname,\n            email: registerForm.email,\n            password: registerForm.password,\n            birthdate: registerForm.birthdate\n        }\n\n        let bodyFormDate = new FormData();\n        bodyFormDate.append('Fname', registerForm.fname)\n        bodyFormDate.append('Lname', registerForm.lname)\n        bodyFormDate.append('Nicknamename', registerForm.nickname)\n        bodyFormDate.append('Email', registerForm.email)\n        bodyFormDate.append('Password', registerForm.password)\n        bodyFormDate.append('Birthdate', registerForm.birthdate)\n\n        console.log('==> ',userRegister)\n\n        await axios({\n            url: api,\n            method: 'POST',\n            data: userRegister\n        }).then(\n            res => {\n                dispatch({type: IUserActionType.ADD_USER_SUCCESS,\n                    payload: res.data\n                })\n                dispatch({type: IUserActionType.ADD_USER_END})\n                window.alert('Register success')\n            }\n        )\n    }\n    catch(err){\n        dispatch({type: IUserActionType.ADD_USER_ERROR,\n            payload: err\n        })\n        window.alert(err)\n    }\n}\n\nconst login = (loginForm: ILoginForm) => async(dispatch: Dispatch<any>) => {\n\n    let api = API + `api/auth/login`\n    dispatch({type: IUserActionType.GET_USER_START})\n    dispatch({type: IAuthActionType.LOGIN_REQUEST})\n    \n    try {\n        let userLogin: ILoginForm = {\n            email: loginForm.email,\n            password: loginForm.password\n        }\n\n        await axios({\n            url: api,\n            method: 'POST',\n            data: userLogin\n        }).then(\n            res => {\n                \n                dispatch({type:IUserActionType.GET_USER_SUCCESS, \n                    payload: res.data\n                })\n                \n                dispatch(\n                    {type:IAuthActionType.LOGIN_SUCCESS,\n                    payload: res.data\n                })\n                \n            })\n        \n    }catch (err) {\n\n        dispatch({type: IUserActionType.GET_USER_ERROR,\n            error: err\n        })\n        dispatch({type: IAuthActionType.LOGIN_FAILURE, \n            error: err\n        })\n        window.alert('email or password incorrect')\n    }\n\n}\n\nconst logout = () => async(dispatch: Dispatch<any>) => {\n\n    if(window.confirm('logout')){\n        dispatch({ type: IAuthActionType.LOGOUT })\n        dispatch({ type: IUserActionType.GET_USER_ERROR })\n    }\n    \n}\n\nexport {\n    login,\n    logout,\n    register\n}"]},"metadata":{},"sourceType":"module"}