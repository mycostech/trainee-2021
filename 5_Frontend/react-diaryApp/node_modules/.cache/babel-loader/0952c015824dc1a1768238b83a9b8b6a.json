{"ast":null,"code":"import { IEventActionType } from '../model/IEventType';\nimport axios from 'axios';\nconst API = process.env.REACT_APP_APP_URL;\n\nconst showLoading = () => async dispatch => {\n  dispatch({\n    type: IEventActionType.SHOW_LOADING\n  });\n};\n\nconst getEventList = uid => async dispatch => {\n  let api = API + `api/event/${uid}`;\n\n  function mapDispatchToProps(dispatch) {\n    return {};\n  }\n\n  z;\n\n  try {\n    let result = await axios.get(api);\n    console.log(\"result \", result);\n    dispatch({\n      type: IEventActionType.GET_ALL_EVENT_SUCESS,\n      payload: result.data\n    });\n  } catch (err) {\n    console.log(\"get event list err : \", err);\n    dispatch({\n      type: IEventActionType.GET_ALL_EVENT_ERROR,\n      payload: err\n    });\n  }\n};\n\nconst getEventDetail = eventId => async dispatch => {\n  let api = API + `api/event/detail/${eventId}`;\n\n  try {\n    let result = await axios.get(api);\n    console.log(\"==> \", result.data);\n    dispatch({\n      type: IEventActionType.GET_EVENT_DETAIL,\n      payload: result.data\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst addEvent = newEvent => async dispatch => {\n  let api = API + `api/add`;\n\n  try {\n    axios({\n      url: api,\n      method: 'POST',\n      data: newEvent\n    }).then(res => {\n      console.log(\"add event \", res.data);\n      dispatch({\n        type: IEventActionType.ADD_NEW_EVENT,\n        payload: res.data\n      });\n    });\n  } catch (err) {}\n};\n\nconst editEvent = (eventId, newEvent) => async dispatch => {\n  let api = API + `api/${eventId}`;\n\n  try {\n    axios({\n      url: api,\n      method: 'PUT',\n      data: newEvent\n    }).then(res => {\n      console.log(\"edit Event\", res.data);\n      dispatch({\n        type: IEventActionType.UPDATE_EVENT,\n        payload: res.data\n      });\n    });\n  } catch (err) {}\n};\n\nconst deleteEvent = eventId => async dispatch => {\n  let api = API + `api/${eventId}`;\n\n  try {} catch (err) {}\n};\n\nexport { showLoading, getEventList, getEventDetail, addEvent, editEvent, deleteEvent };","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/Action/EventAction.ts"],"names":["IEventActionType","axios","API","process","env","REACT_APP_APP_URL","showLoading","dispatch","type","SHOW_LOADING","getEventList","uid","api","mapDispatchToProps","z","result","get","console","log","GET_ALL_EVENT_SUCESS","payload","data","err","GET_ALL_EVENT_ERROR","getEventDetail","eventId","GET_EVENT_DETAIL","addEvent","newEvent","url","method","then","res","ADD_NEW_EVENT","editEvent","UPDATE_EVENT","deleteEvent"],"mappings":"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","sourcesContent":["import { Dispatch } from 'react'\nimport { IEventActionType, IEventAction, IEvent } from '../model/IEventType'\nimport axios from 'axios'\n\n\nconst API = process.env.REACT_APP_APP_URL\n\nconst showLoading = () => async(dispatch: Dispatch<IEventAction>) => {\n    dispatch({\n        type: IEventActionType.SHOW_LOADING\n    })\n}\n\nconst getEventList = (uid: string) => async(dispatch: Dispatch<IEventAction>) => {\n    \n    let api = API + `api/event/${uid}`\n    function mapDispatchToProps(dispatch) {\n        return {\n        }\n    \n    }z\n    try{\n\n        let result:any = await axios.get<any>(api)\n        console.log(\"result \",result)\n\n        dispatch({\n            type: IEventActionType.GET_ALL_EVENT_SUCESS,\n            payload: result.data\n        })\n\n    }\n    catch (err){\n        console.log(\"get event list err : \",err)\n        dispatch({\n            type: IEventActionType.GET_ALL_EVENT_ERROR,\n            payload: err\n        })\n    }\n    \n}\n\nconst getEventDetail = (eventId: number) => async(dispatch: Dispatch<IEventAction>) => {\n    \n    let api = API + `api/event/detail/${eventId}`\n    try{\n\n        let result:any = await axios.get<any>(api)\n        console.log(\"==> \",result.data)\n\n        dispatch({\n            type: IEventActionType.GET_EVENT_DETAIL,\n            payload: result.data\n        })\n\n    }\n    catch(err){\n        console.log(err)\n    }\n}\n\nconst addEvent = (newEvent: IEvent) => async(dispatch: any) => {\n    let api = API + `api/add`\n    try{\n        axios({\n            url: api,\n            method: 'POST',\n            data: newEvent\n        }).then(res => {\n            console.log(\"add event \",res.data)\n\n            dispatch({\n                type: IEventActionType.ADD_NEW_EVENT,\n                payload: res.data\n            })\n        })\n    }\n    catch(err){\n\n    }\n}\n\nconst editEvent = (eventId: number,newEvent: IEvent) => async(dispatch: any) => {\n    let api = API + `api/${eventId}`\n    try{\n        axios({\n            url:api,\n            method: 'PUT',\n            data: newEvent\n        }).then(res => {\n            console.log(\"edit Event\", res.data)\n\n            dispatch({\n                type: IEventActionType.UPDATE_EVENT,\n                payload: res.data\n            })\n        })\n    }\n    catch(err){\n\n    }\n}\n\nconst deleteEvent = (eventId: number) => async(dispatch: any) => {\n    let api = API + `api/${eventId}`\n    try{\n\n    }\n    catch(err){\n\n    }\n}\n\nexport {\n    showLoading,\n    getEventList,\n    getEventDetail,\n    addEvent,\n    editEvent,\n    deleteEvent\n}\n\n"]},"metadata":{},"sourceType":"module"}