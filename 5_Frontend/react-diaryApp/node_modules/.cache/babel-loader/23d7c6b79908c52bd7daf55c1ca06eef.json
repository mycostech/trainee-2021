{"ast":null,"code":"export let IEventActionType;\n\n(function (IEventActionType) {\n  IEventActionType[\"GET_ALL_EVENT\"] = \"GET_ALL_EVENT\";\n  IEventActionType[\"GET_EVENT_DETAIL\"] = \"GET_EVENT_DETAIL\";\n  IEventActionType[\"ADD_NEW_EVENT\"] = \"ADD_NEW_EVENT\";\n  IEventActionType[\"UPDATE_EVENT\"] = \"UPDATE_EVENT\";\n  IEventActionType[\"DELETE_EVENT\"] = \"DELETE_EVENT\";\n  IEventActionType[\"SHOW_LOADING\"] = \"SHOW_LOADING\";\n})(IEventActionType || (IEventActionType = {}));","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/model/IEventType.ts"],"names":["IEventActionType"],"mappings":"AAcA,WAAYA,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB","sourcesContent":["export interface IEvent {\n    id?: number;\n    dateTime: any;\n    eventName: string;\n    memo: string;\n}\n\nexport interface IEventsState{\n    eventList: IEvent[];\n    loading: boolean;\n    event?: IEvent;\n}\n\n\nexport enum IEventActionType {\n    \n    GET_ALL_EVENT = \"GET_ALL_EVENT\",\n    GET_EVENT_DETAIL = \"GET_EVENT_DETAIL\",\n    ADD_NEW_EVENT = \"ADD_NEW_EVENT\",\n    UPDATE_EVENT = \"UPDATE_EVENT\",\n    DELETE_EVENT = \"DELETE_EVENT\",\n    SHOW_LOADING = \"SHOW_LOADING\"\n}\n\nexport type EventAction = IEventActionType\n\nexport interface IEventAction {\n    type: IEventActionType;\n    payload?: any;\n}"]},"metadata":{},"sourceType":"module"}