{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/components/AddEventForm/AddEventForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { addEvent } from '../../Action/EventAction';\nimport './AddEventForm.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddEventForm() {\n  _s();\n\n  const [_dateTime, setDateTime] = useState('');\n  const [_eventName, setEventName] = useState('');\n  const [_memo, setMemo] = useState('');\n  const dispatch = useDispatch();\n  const event = useSelector(state => state.EventReducer);\n  const user = useSelector(state => state.UserReducer);\n  const auth = useSelector(state => state.AuthReducer);\n  const history = useHistory();\n\n  const onSubmitForm = () => {\n    if (user.getsuccess && auth.logingIn) {\n      var _user$userInfo;\n\n      console.log('Subbit event form');\n      let newEvent = {\n        dateTime: _dateTime,\n        eventName: _eventName,\n        memo: _memo,\n        userId: (_user$userInfo = user.userInfo) === null || _user$userInfo === void 0 ? void 0 : _user$userInfo.id\n      };\n      dispatch(addEvent(newEvent));\n    }\n  };\n\n  console.log(\"==> \", event);\n  React.useEffect(() => {\n    if (event.addSuccess) {\n      history.push('/events');\n    }\n  }, [event]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"link\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/events\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"New Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: event.loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Date Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"datetime-local\",\n      onChange: e => {\n        setDateTime(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onSubmitForm,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddEventForm, \"zXU4aliJTJUu+3MtYODp8c+w8s8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useHistory];\n});\n\n_c = AddEventForm;\nexport default AddEventForm;\n{\n  /* <div>\n                             <input type=\"datetime-local\"\n                                 onChange={\n                                     e => {setDateTime(e.target.value)}\n                                 }\n                             />\n                         </div>\n                         <div>\n                             <input type=\"text\" placeholder=\"Event Name\"\n                                 onChange= {\n                                     e => setEventName(e.target.value)\n                                 }\n                             />\n                         </div>\n                         <div>\n                             <textarea onChange={\n                                 e => setMemo(e.target.value)\n                             }></textarea>\n                         </div> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddEventForm\");","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/components/AddEventForm/AddEventForm.tsx"],"names":["React","useState","useDispatch","useSelector","useHistory","Link","addEvent","AddEventForm","_dateTime","setDateTime","_eventName","setEventName","_memo","setMemo","dispatch","event","state","EventReducer","user","UserReducer","auth","AuthReducer","history","onSubmitForm","getsuccess","logingIn","console","log","newEvent","dateTime","eventName","memo","userId","userInfo","id","useEffect","addSuccess","push","loading","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { useHistory, useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { addEvent } from '../../Action/EventAction';\nimport { IEvent } from '../../model/IEventType';\nimport { RootState } from '../../Reducer'\n\nimport './AddEventForm.scss'\n\nfunction AddEventForm(){\n\n    const [_dateTime, setDateTime] = useState<string>('')\n    const [_eventName, setEventName] = useState<string>('')\n    const [_memo, setMemo] = useState<string>('')\n    \n    const dispatch = useDispatch()\n\n    const event = useSelector((state: RootState) => state.EventReducer)\n    const user = useSelector((state: RootState) => state.UserReducer)\n    const auth = useSelector((state: RootState) => state.AuthReducer)\n\n    const history = useHistory()\n\n    const onSubmitForm = () => {\n\n        if(user.getsuccess && auth.logingIn){\n            console.log('Subbit event form')\n\n            let newEvent:IEvent = {\n                dateTime: _dateTime,\n                eventName: _eventName,\n                memo: _memo,\n                userId: user.userInfo?.id\n            }\n\n            dispatch(addEvent(newEvent))\n        }\n\n    }\n\n    console.log(\"==> \",event)\n\n    React.useEffect(() => {\n        \n        if(event.addSuccess){\n            history.push('/events')\n        }\n\n    },[event])\n\n\n    return (\n        <div className=\"container\">\n\n            <div className=\"link\">\n                <Link to=\"/events\">\n                    <a>Back</a>\n                </Link>\n            </div>\n\n\n            <h2>New Event</h2>\n            <hr/>\n\n            <div className=\"loading-container\">\n                {event.loading &&\n                    <p>Loading ...</p>\n                }\n            </div>\n\n            <div>Date Time</div>\n            <input type=\"datetime-local\"\n                onChange={\n                                    e => {setDateTime(e.target.value)}\n                                }\n                            />\n\n            <button onClick={onSubmitForm}>Submit</button>\n    \n        </div>\n    )\n}\n\nexport default AddEventForm;\n\n\n{/* <div>\n                            <input type=\"datetime-local\"\n                                onChange={\n                                    e => {setDateTime(e.target.value)}\n                                }\n                            />\n                        </div>\n                        <div>\n                            <input type=\"text\" placeholder=\"Event Name\"\n                                onChange= {\n                                    e => setEventName(e.target.value)\n                                }\n                            />\n                        </div>\n                        <div>\n                            <textarea onChange={\n                                e => setMemo(e.target.value)\n                            }></textarea>\n                        </div> */}"]},"metadata":{},"sourceType":"module"}