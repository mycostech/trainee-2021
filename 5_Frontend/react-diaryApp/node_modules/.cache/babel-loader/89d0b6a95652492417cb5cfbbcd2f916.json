{"ast":null,"code":"import { IUserActionType } from '../model/IUserType';\nimport axios from 'axios';\nimport { IAuthActionType } from '../model/IAuthType';\nconst API = process.env.REACT_APP_APP_URL;\n\nconst login = loginForm => async dispatch => {\n  let api = API + `api/auth/login`;\n  dispatch({\n    type: IUserActionType.GET_USER_START\n  });\n  dispatch({\n    type: IAuthActionType.LOGIN_REQUEST\n  });\n\n  try {\n    let userLogin = {\n      email: loginForm.email,\n      password: loginForm.password\n    };\n    await axios({\n      url: api,\n      method: 'POST',\n      data: userLogin\n    }).then(res => {\n      //localStorage.setItem('user', JSON.stringify(res.data))\n      if (userLogin.password === res.data.password) {\n        window.alert('Welcome to mydiaryApp');\n      } else {\n        window.alert('password incorrect !!');\n        dispatch({\n          type: IAuthActionType.LOGIN_FAILURE\n        });\n        dispatch({\n          type: IUserActionType.GET_USER_ERROR\n        });\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: IUserActionType.GET_USER_ERROR,\n      error: err\n    });\n    dispatch({\n      type: IAuthActionType.LOGIN_FAILURE,\n      error: err\n    });\n  }\n};\n\nconst logout = () => async dispatch => {\n  if (window.confirm('logout')) {\n    dispatch({\n      type: IAuthActionType.LOGOUT\n    });\n    dispatch({\n      type: IUserActionType.GET_USER_ERROR\n    });\n  }\n};\n\nexport { login, logout };","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/Action/UserAction.ts"],"names":["IUserActionType","axios","IAuthActionType","API","process","env","REACT_APP_APP_URL","login","loginForm","dispatch","api","type","GET_USER_START","LOGIN_REQUEST","userLogin","email","password","url","method","data","then","res","window","alert","LOGIN_FAILURE","GET_USER_ERROR","err","error","logout","confirm","LOGOUT"],"mappings":"AACA,SAASA,eAAT,QAAoD,oBAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AAIA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAxB;;AAEA,MAAMC,KAAK,GAAIC,SAAD,IAA2B,MAAMC,QAAN,IAAkC;AAEvE,MAAIC,GAAG,GAAGP,GAAG,GAAI,gBAAjB;AACAM,EAAAA,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAEX,eAAe,CAACY;AAAvB,GAAD,CAAR;AACAH,EAAAA,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAET,eAAe,CAACW;AAAvB,GAAD,CAAR;;AAEA,MAAI;AACA,QAAIC,SAAS,GAAG;AACZC,MAAAA,KAAK,EAAEP,SAAS,CAACO,KADL;AAEZC,MAAAA,QAAQ,EAAER,SAAS,CAACQ;AAFR,KAAhB;AAKA,UAAMf,KAAK,CAAC;AACRgB,MAAAA,GAAG,EAAEP,GADG;AAERQ,MAAAA,MAAM,EAAE,MAFA;AAGRC,MAAAA,IAAI,EAAEL;AAHE,KAAD,CAAL,CAIHM,IAJG,CAKFC,GAAG,IAAI;AAEH;AAEA,UAAGP,SAAS,CAACE,QAAV,KAAuBK,GAAG,CAACF,IAAJ,CAASH,QAAnC,EAA4C;AAExCM,QAAAA,MAAM,CAACC,KAAP,CAAa,uBAAb;AACH,OAHD,MAII;AACAD,QAAAA,MAAM,CAACC,KAAP,CAAa,uBAAb;AACAd,QAAAA,QAAQ,CACJ;AAACE,UAAAA,IAAI,EAAET,eAAe,CAACsB;AAAvB,SADI,CAAR;AAGAf,QAAAA,QAAQ,CAAC;AACLE,UAAAA,IAAI,EAAEX,eAAe,CAACyB;AADjB,SAAD,CAAR;AAGH;AAEJ,KAvBC,CAAN;AAyBH,GA/BD,CA+BC,OAAOC,GAAP,EAAY;AAETjB,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEX,eAAe,CAACyB,cAAvB;AACLE,MAAAA,KAAK,EAAED;AADF,KAAD,CAAR;AAGAjB,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAET,eAAe,CAACsB,aAAvB;AACLG,MAAAA,KAAK,EAAED;AADF,KAAD,CAAR;AAGH;AAEJ,CA/CD;;AAiDA,MAAME,MAAM,GAAG,MAAM,MAAMnB,QAAN,IAAkC;AAEnD,MAAGa,MAAM,CAACO,OAAP,CAAe,QAAf,CAAH,EAA4B;AACxBpB,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAET,eAAe,CAAC4B;AAAxB,KAAD,CAAR;AACArB,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEX,eAAe,CAACyB;AAAxB,KAAD,CAAR;AACH;AAEJ,CAPD;;AASA,SACIlB,KADJ,EAEIqB,MAFJ","sourcesContent":["import { Dispatch } from 'react'\nimport { IUserActionType, IUserAction, IUser } from '../model/IUserType';\nimport axios from 'axios'\nimport { IAuthActionType } from '../model/IAuthType';\nimport { ILoginForm } from '../model/ILoginForm';\n\n\nconst API = process.env.REACT_APP_APP_URL\n\nconst login = (loginForm: ILoginForm) => async(dispatch: Dispatch<any>) => {\n\n    let api = API + `api/auth/login`\n    dispatch({type: IUserActionType.GET_USER_START})\n    dispatch({type: IAuthActionType.LOGIN_REQUEST})\n    \n    try {\n        let userLogin = {\n            email: loginForm.email,\n            password: loginForm.password\n        }\n\n        await axios({\n            url: api,\n            method: 'POST',\n            data: userLogin\n        }).then(\n            res => {\n                \n                //localStorage.setItem('user', JSON.stringify(res.data))\n\n                if(userLogin.password === res.data.password){\n                    \n                    window.alert('Welcome to mydiaryApp')\n                }\n                else{\n                    window.alert('password incorrect !!')\n                    dispatch(\n                        {type: IAuthActionType.LOGIN_FAILURE}\n                    )\n                    dispatch({\n                        type: IUserActionType.GET_USER_ERROR\n                    })\n                }\n                \n            })\n        \n    }catch (err) {\n\n        dispatch({type: IUserActionType.GET_USER_ERROR,\n            error: err\n        })\n        dispatch({type: IAuthActionType.LOGIN_FAILURE, \n            error: err\n        })\n    }\n\n}\n\nconst logout = () => async(dispatch: Dispatch<any>) => {\n\n    if(window.confirm('logout')){\n        dispatch({ type: IAuthActionType.LOGOUT })\n        dispatch({ type: IUserActionType.GET_USER_ERROR })\n    }\n    \n}\n\nexport {\n    login,\n    logout\n}"]},"metadata":{},"sourceType":"module"}