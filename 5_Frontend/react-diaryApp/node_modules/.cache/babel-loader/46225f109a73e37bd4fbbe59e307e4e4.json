{"ast":null,"code":"import { IEventActionType } from '../model/IEventType';\nimport axios from 'axios';\nconst API = process.env.REACT_APP_APP_URL;\n\nconst getEventList = uid => async dispatch => {\n  if (uid !== undefined) {}\n};\n\nconst getEventDetail = eventId => async dispatch => {\n  let api = API + `api/event/detail/${eventId}`;\n  dispatch({\n    type: IEventActionType.GET_EVENT_DETAIL_START\n  });\n\n  try {\n    let result = await axios.get(api);\n    console.log(\"==> \", result.data);\n    dispatch({\n      type: IEventActionType.GET_EVENT_DETAIL_SUCCESS,\n      payload: result.data\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: IEventActionType.GET_EVENT_DETAIL_ERROR\n    });\n  }\n};\n\nconst addEvent = newEvent => async dispatch => {\n  //window.alert(newEvent.userId)\n  let api = API + `api/event/add`;\n  dispatch({\n    type: IEventActionType.ADD_NEW_EVENT_START\n  });\n\n  try {\n    await axios({\n      url: api,\n      method: 'POST',\n      data: newEvent\n    }).then(res => {\n      //window.alert(res.data)\n      console.log(\"add event \", res.data);\n      dispatch({\n        type: IEventActionType.ADD_NEW_EVENT_SUCESS,\n        payload: res.data\n      });\n    });\n  } catch (err) {\n    //window.alert(err)\n    dispatch({\n      type: IEventActionType.ADD_NEW_EVENT_ERROR\n    });\n  }\n};\n\nconst editEvent = (eventId, newEvent) => async dispatch => {\n  let api = API + `api/event/${eventId}`;\n  dispatch({\n    type: IEventActionType.UPDATE_EVENT_START\n  });\n\n  try {\n    axios({\n      url: api,\n      method: 'PUT',\n      data: newEvent\n    }).then(res => {\n      console.log(\"edit Event\", res.data);\n      dispatch({\n        type: IEventActionType.UPDATE_EVENT_SUCCESS,\n        payload: res.data\n      });\n    });\n  } catch (err) {\n    dispatch({\n      type: IEventActionType.UPDATE_EVENT_ERROR,\n      error: err\n    });\n  }\n};\n\nconst deleteEvent = eventId => async dispatch => {\n  let api = API + `api/event/${eventId}`;\n  dispatch({\n    type: IEventActionType.DELETE_EVENT_START\n  });\n\n  try {\n    axios.delete(api).then(res => {\n      console.log('delete ', res.data);\n      dispatch({\n        type: IEventActionType.DELETE_EVENT_SUCCESS,\n        payload: res.data\n      });\n    });\n  } catch (err) {\n    dispatch({\n      type: IEventActionType.GET_ALL_EVENT_ERROR,\n      payload: err\n    });\n  }\n};\n\nexport { getEventList, getEventDetail, addEvent, editEvent, deleteEvent };","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/Action/EventAction.ts"],"names":["IEventActionType","axios","API","process","env","REACT_APP_APP_URL","getEventList","uid","dispatch","undefined","getEventDetail","eventId","api","type","GET_EVENT_DETAIL_START","result","get","console","log","data","GET_EVENT_DETAIL_SUCCESS","payload","err","GET_EVENT_DETAIL_ERROR","addEvent","newEvent","ADD_NEW_EVENT_START","url","method","then","res","ADD_NEW_EVENT_SUCESS","ADD_NEW_EVENT_ERROR","editEvent","UPDATE_EVENT_START","UPDATE_EVENT_SUCCESS","UPDATE_EVENT_ERROR","error","deleteEvent","DELETE_EVENT_START","delete","DELETE_EVENT_SUCCESS","GET_ALL_EVENT_ERROR"],"mappings":"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","sourcesContent":["import { Dispatch } from 'react'\nimport { IEventActionType, IEventAction, IEvent } from '../model/IEventType'\nimport axios from 'axios'\n\n\nconst API = process.env.REACT_APP_APP_URL\n\n\nconst getEventList = (uid?: string) => async(dispatch: Dispatch<IEventAction>) => {\n    \n    if(uid !== undefined){\n        \n    }\n    \n    \n}\n\nconst getEventDetail = (eventId: number) => async(dispatch: Dispatch<IEventAction>) => {\n    \n    let api = API + `api/event/detail/${eventId}`\n    dispatch({\n        type: IEventActionType.GET_EVENT_DETAIL_START})\n\n    try{\n\n        let result:any = await axios.get<any>(api)\n        console.log(\"==> \",result.data)\n\n        dispatch({\n            type: IEventActionType.GET_EVENT_DETAIL_SUCCESS,\n            payload: result.data\n        })\n\n    }\n    catch(err){\n        console.log(err)\n        dispatch({\n            type: IEventActionType.GET_EVENT_DETAIL_ERROR\n        })\n    }\n}\n\nconst addEvent = (newEvent: IEvent) => async(dispatch: any) => {\n    \n    //window.alert(newEvent.userId)\n    let api = API + `api/event/add`\n    dispatch({ type:IEventActionType.ADD_NEW_EVENT_START})\n\n\n    try{\n        await axios({\n            url: api,\n            method: 'POST',\n            data: newEvent\n        }).then(res => {\n\n            //window.alert(res.data)\n            console.log(\"add event \",res.data)\n\n            dispatch({\n                type: IEventActionType.ADD_NEW_EVENT_SUCESS,\n                payload: res.data,\n            })\n        })\n    }\n    catch(err){\n\n        //window.alert(err)\n        dispatch({\n            type: IEventActionType.ADD_NEW_EVENT_ERROR\n        })\n    }\n}\n\nconst editEvent = (eventId: number,newEvent: IEvent) => async(dispatch: any) => {\n    let api = API + `api/event/${eventId}`\n    dispatch({ type: IEventActionType.UPDATE_EVENT_START })\n    \n    try{\n        axios({\n            url:api,\n            method: 'PUT',\n            data: newEvent\n        }).then(res => {\n            console.log(\"edit Event\", res.data)\n\n            dispatch({\n                type: IEventActionType.UPDATE_EVENT_SUCCESS,\n                payload: res.data\n            })\n        })\n    }\n    catch(err){\n        dispatch({\n            type: IEventActionType.UPDATE_EVENT_ERROR,\n            error: err\n        })\n    }\n}\n\n\nconst deleteEvent = (eventId: number) => async(dispatch: any) => {\n    let api = API + `api/event/${eventId}`\n    dispatch({ type: IEventActionType.DELETE_EVENT_START })\n    \n    try{\n        axios.delete(api)\n        .then(res => {\n            console.log('delete ', res.data)\n            dispatch({\n                type: IEventActionType.DELETE_EVENT_SUCCESS,\n                payload: res.data\n            })\n        })\n    }\n    catch(err){\n        dispatch({\n            type: IEventActionType.GET_ALL_EVENT_ERROR,\n            payload: err\n        })\n    }\n}\n\nexport {\n    getEventList,\n    getEventDetail,\n    addEvent,\n    editEvent,\n    deleteEvent\n}\n\n"]},"metadata":{},"sourceType":"module"}