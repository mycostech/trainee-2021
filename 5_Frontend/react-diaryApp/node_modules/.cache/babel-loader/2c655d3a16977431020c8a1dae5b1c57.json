{"ast":null,"code":"import { IUserActionType } from '../model/IUserType';\nimport axios from 'axios';\nimport { IAuthActionType } from '../model/IAuthType';\nconst API = process.env.REACT_APP_APP_URL;\n\nconst register = registerForm => async dispatch => {\n  let api = API + `api/auth/register`;\n  dispatch({\n    type: IUserActionType.ADD_USER_START\n  });\n  disp;\n};\n\nconst login = loginForm => async dispatch => {\n  let api = API + `api/auth/login`;\n  dispatch({\n    type: IUserActionType.GET_USER_START\n  });\n  dispatch({\n    type: IAuthActionType.LOGIN_REQUEST\n  });\n\n  try {\n    let userLogin = {\n      email: loginForm.email,\n      password: loginForm.password\n    };\n    await axios({\n      url: api,\n      method: 'POST',\n      data: userLogin\n    }).then(res => {\n      dispatch({\n        type: IUserActionType.GET_USER_SUCCESS,\n        payload: res.data\n      });\n      dispatch({\n        type: IAuthActionType.LOGIN_SUCCESS,\n        payload: res.data\n      });\n    });\n  } catch (err) {\n    dispatch({\n      type: IUserActionType.GET_USER_ERROR,\n      error: err\n    });\n    dispatch({\n      type: IAuthActionType.LOGIN_FAILURE,\n      error: err\n    });\n    window.alert('email or password incorrect');\n  }\n};\n\nconst logout = () => async dispatch => {\n  if (window.confirm('logout')) {\n    dispatch({\n      type: IAuthActionType.LOGOUT\n    });\n    dispatch({\n      type: IUserActionType.GET_USER_ERROR\n    });\n  }\n};\n\nexport { login, logout };","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/Action/UserAction.ts"],"names":["IUserActionType","axios","IAuthActionType","API","process","env","REACT_APP_APP_URL","register","registerForm","dispatch","api","type","ADD_USER_START","disp","login","loginForm","GET_USER_START","LOGIN_REQUEST","userLogin","email","password","url","method","data","then","res","GET_USER_SUCCESS","payload","LOGIN_SUCCESS","err","GET_USER_ERROR","error","LOGIN_FAILURE","window","alert","logout","confirm","LOGOUT"],"mappings":"AACA,SAASA,eAAT,QAAoD,oBAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AAKA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAxB;;AAEA,MAAMC,QAAQ,GAAIC,YAAD,IAAiC,MAAMC,QAAN,IAAkC;AAEhF,MAAIC,GAAG,GAAGP,GAAG,GAAI,mBAAjB;AACAM,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEX,eAAe,CAACY;AAAxB,GAAD,CAAR;AACAC,EAAAA,IAAI;AACP,CALD;;AAOA,MAAMC,KAAK,GAAIC,SAAD,IAA2B,MAAMN,QAAN,IAAkC;AAEvE,MAAIC,GAAG,GAAGP,GAAG,GAAI,gBAAjB;AACAM,EAAAA,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAEX,eAAe,CAACgB;AAAvB,GAAD,CAAR;AACAP,EAAAA,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAET,eAAe,CAACe;AAAvB,GAAD,CAAR;;AAEA,MAAI;AACA,QAAIC,SAAS,GAAG;AACZC,MAAAA,KAAK,EAAEJ,SAAS,CAACI,KADL;AAEZC,MAAAA,QAAQ,EAAEL,SAAS,CAACK;AAFR,KAAhB;AAKA,UAAMnB,KAAK,CAAC;AACRoB,MAAAA,GAAG,EAAEX,GADG;AAERY,MAAAA,MAAM,EAAE,MAFA;AAGRC,MAAAA,IAAI,EAAEL;AAHE,KAAD,CAAL,CAIHM,IAJG,CAKFC,GAAG,IAAI;AAEHhB,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAACX,eAAe,CAAC0B,gBAAtB;AACLC,QAAAA,OAAO,EAAEF,GAAG,CAACF;AADR,OAAD,CAAR;AAIAd,MAAAA,QAAQ,CACJ;AAACE,QAAAA,IAAI,EAACT,eAAe,CAAC0B,aAAtB;AACAD,QAAAA,OAAO,EAAEF,GAAG,CAACF;AADb,OADI,CAAR;AAKH,KAhBC,CAAN;AAkBH,GAxBD,CAwBC,OAAOM,GAAP,EAAY;AAETpB,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEX,eAAe,CAAC8B,cAAvB;AACLC,MAAAA,KAAK,EAAEF;AADF,KAAD,CAAR;AAGApB,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAET,eAAe,CAAC8B,aAAvB;AACLD,MAAAA,KAAK,EAAEF;AADF,KAAD,CAAR;AAGAI,IAAAA,MAAM,CAACC,KAAP,CAAa,6BAAb;AACH;AAEJ,CAzCD;;AA2CA,MAAMC,MAAM,GAAG,MAAM,MAAM1B,QAAN,IAAkC;AAEnD,MAAGwB,MAAM,CAACG,OAAP,CAAe,QAAf,CAAH,EAA4B;AACxB3B,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAET,eAAe,CAACmC;AAAxB,KAAD,CAAR;AACA5B,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEX,eAAe,CAAC8B;AAAxB,KAAD,CAAR;AACH;AAEJ,CAPD;;AASA,SACIhB,KADJ,EAEIqB,MAFJ","sourcesContent":["import { Dispatch } from 'react'\nimport { IUserActionType, IUserAction, IUser } from '../model/IUserType';\nimport axios from 'axios'\nimport { IAuthActionType } from '../model/IAuthType';\nimport { ILoginForm } from '../model/ILoginForm';\nimport { IRegisterForm } from '../model/IRegisterForm';\n\n\nconst API = process.env.REACT_APP_APP_URL\n\nconst register = (registerForm: IRegisterForm) => async(dispatch: Dispatch<any>) => {\n\n    let api = API + `api/auth/register`\n    dispatch({ type: IUserActionType.ADD_USER_START })\n    disp\n}\n\nconst login = (loginForm: ILoginForm) => async(dispatch: Dispatch<any>) => {\n\n    let api = API + `api/auth/login`\n    dispatch({type: IUserActionType.GET_USER_START})\n    dispatch({type: IAuthActionType.LOGIN_REQUEST})\n    \n    try {\n        let userLogin = {\n            email: loginForm.email,\n            password: loginForm.password\n        }\n\n        await axios({\n            url: api,\n            method: 'POST',\n            data: userLogin\n        }).then(\n            res => {\n                \n                dispatch({type:IUserActionType.GET_USER_SUCCESS, \n                    payload: res.data\n                })\n                \n                dispatch(\n                    {type:IAuthActionType.LOGIN_SUCCESS,\n                    payload: res.data\n                })\n                \n            })\n        \n    }catch (err) {\n\n        dispatch({type: IUserActionType.GET_USER_ERROR,\n            error: err\n        })\n        dispatch({type: IAuthActionType.LOGIN_FAILURE, \n            error: err\n        })\n        window.alert('email or password incorrect')\n    }\n\n}\n\nconst logout = () => async(dispatch: Dispatch<any>) => {\n\n    if(window.confirm('logout')){\n        dispatch({ type: IAuthActionType.LOGOUT })\n        dispatch({ type: IUserActionType.GET_USER_ERROR })\n    }\n    \n}\n\nexport {\n    login,\n    logout\n}"]},"metadata":{},"sourceType":"module"}