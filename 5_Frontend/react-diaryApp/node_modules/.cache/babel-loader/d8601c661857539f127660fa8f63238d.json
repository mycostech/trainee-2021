{"ast":null,"code":"import { IEventActionType } from '../model/IEventType';\nimport axios from 'axios';\nconst API = process.env.REACT_APP_APP_URL;\n\nconst showLoading = () => async dispatch => {\n  dispatch({\n    type: IEventActionType.SHOW_LOADING\n  });\n};\n\nconst getEventList = uid => async dispatch => {\n  let api = API + `api/event/${uid}`;\n  dispatch({\n    type: IEventActionType.GET_ALL_EVENT_START\n  });\n\n  try {\n    let result = await axios.get(api);\n    console.log(\"result \", result);\n    dispatch({\n      type: IEventActionType.GET_ALL_EVENT_SUCESS,\n      payload: result.data\n    });\n  } catch (err) {\n    console.log(\"get event list err : \", err);\n    dispatch({\n      type: IEventActionType.GET_ALL_EVENT_ERROR,\n      payload: err\n    });\n  }\n};\n\nconst getEventDetail = eventId => async dispatch => {\n  let api = API + `api/event/detail/${eventId}`;\n  dispatch({\n    type: IEventActionType.GET_EVENT_DETAIL_START\n  });\n\n  try {\n    let result = await axios.get(api);\n    console.log(\"==> \", result.data);\n    dispatch({\n      type: IEventActionType.GET_EVENT_DETAIL_SUCCESS,\n      payload: result.data\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: IEventActionType.GET_EVENT_DETAIL_ERROR\n    });\n  }\n};\n\nconst addEvent = newEvent => async dispatch => {\n  //window.alert(newEvent.userId)\n  let api = API + `api/event/add`;\n  dispatch({\n    type: IEventActionType.ADD_NEW_EVENT_START\n  });\n\n  try {\n    axios({\n      url: api,\n      method: 'POST',\n      data: newEvent\n    }).then(res => {\n      //window.alert(res.data)\n      console.log(\"add event \", res.data);\n      dispatch({\n        type: IEventActionType.ADD_NEW_EVENT_SUCESS,\n        payload: res.data\n      });\n    });\n  } catch (err) {\n    //window.alert(err)\n    dispatch({\n      type: IEventActionType.ADD_NEW_EVENT_ERROR\n    });\n  }\n};\n\nconst editEvent = (eventId, newEvent) => async dispatch => {\n  let api = API + `api/${eventId}`;\n\n  try {\n    axios({\n      url: api,\n      method: 'PUT',\n      data: newEvent\n    }).then(res => {\n      console.log(\"edit Event\", res.data);\n      dispatch({\n        type: IEventActionType.UPDATE_EVENT_SUCCESS,\n        payload: res.data\n      });\n    });\n  } catch (err) {}\n};\n\nconst deleteEvent = eventId => async dispatch => {\n  let api = API + `api/${eventId}`;\n\n  try {} catch (err) {}\n};\n\nexport { showLoading, getEventList, getEventDetail, addEvent, editEvent, deleteEvent };","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/Action/EventAction.ts"],"names":["IEventActionType","axios","API","process","env","REACT_APP_APP_URL","showLoading","dispatch","type","SHOW_LOADING","getEventList","uid","api","GET_ALL_EVENT_START","result","get","console","log","GET_ALL_EVENT_SUCESS","payload","data","err","GET_ALL_EVENT_ERROR","getEventDetail","eventId","GET_EVENT_DETAIL_START","GET_EVENT_DETAIL_SUCCESS","GET_EVENT_DETAIL_ERROR","addEvent","newEvent","ADD_NEW_EVENT_START","url","method","then","res","ADD_NEW_EVENT_SUCESS","ADD_NEW_EVENT_ERROR","editEvent","UPDATE_EVENT_SUCCESS","deleteEvent"],"mappings":"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","sourcesContent":["import { Dispatch } from 'react'\nimport { IEventActionType, IEventAction, IEvent } from '../model/IEventType'\nimport axios from 'axios'\n\n\nconst API = process.env.REACT_APP_APP_URL\n\nconst showLoading = () => async(dispatch: Dispatch<IEventAction>) => {\n    dispatch({\n        type: IEventActionType.SHOW_LOADING\n    })\n}\n\nconst getEventList = (uid: string) => async(dispatch: Dispatch<IEventAction>) => {\n    \n    let api = API + `api/event/${uid}`\n    dispatch({type: IEventActionType.GET_ALL_EVENT_START})\n    try{\n\n        let result:any = await axios.get<any>(api)\n        console.log(\"result \",result)\n\n        dispatch({\n            type: IEventActionType.GET_ALL_EVENT_SUCESS,\n            payload: result.data\n        })\n\n    }\n    catch (err){\n        console.log(\"get event list err : \",err)\n        dispatch({\n            type: IEventActionType.GET_ALL_EVENT_ERROR,\n            payload: err\n        })\n    }\n    \n}\n\nconst getEventDetail = (eventId: number) => async(dispatch: Dispatch<IEventAction>) => {\n    \n    let api = API + `api/event/detail/${eventId}`\n    dispatch({\n        type: IEventActionType.GET_EVENT_DETAIL_START})\n\n    try{\n\n        let result:any = await axios.get<any>(api)\n        console.log(\"==> \",result.data)\n\n        dispatch({\n            type: IEventActionType.GET_EVENT_DETAIL_SUCCESS,\n            payload: result.data\n        })\n\n    }\n    catch(err){\n        console.log(err)\n        dispatch({\n            type: IEventActionType.GET_EVENT_DETAIL_ERROR\n        })\n    }\n}\n\nconst addEvent = (newEvent: IEvent) => async(dispatch: any) => {\n    \n    //window.alert(newEvent.userId)\n    let api = API + `api/event/add`\n    dispatch({ type:IEventActionType.ADD_NEW_EVENT_START})\n\n    try{\n        axios({\n            url: api,\n            method: 'POST',\n            data: newEvent\n        }).then(res => {\n\n            //window.alert(res.data)\n            console.log(\"add event \",res.data)\n\n            dispatch({\n                type: IEventActionType.ADD_NEW_EVENT_SUCESS,\n                payload: res.data\n            })\n        })\n    }\n    catch(err){\n\n        //window.alert(err)\n        dispatch({\n            type: IEventActionType.ADD_NEW_EVENT_ERROR\n        })\n    }\n}\n\nconst editEvent = (eventId: number,newEvent: IEvent) => async(dispatch: any) => {\n    let api = API + `api/${eventId}`\n    try{\n        axios({\n            url:api,\n            method: 'PUT',\n            data: newEvent\n        }).then(res => {\n            console.log(\"edit Event\", res.data)\n\n            dispatch({\n                type: IEventActionType.UPDATE_EVENT_SUCCESS,\n                payload: res.data\n            })\n        })\n    }\n    catch(err){\n\n    }\n}\n\nconst deleteEvent = (eventId: number) => async(dispatch: any) => {\n    let api = API + `api/${eventId}`\n    try{\n\n    }\n    catch(err){\n\n    }\n}\n\nexport {\n    showLoading,\n    getEventList,\n    getEventDetail,\n    addEvent,\n    editEvent,\n    deleteEvent\n}\n\n"]},"metadata":{},"sourceType":"module"}