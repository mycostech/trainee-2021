{"ast":null,"code":"import { IUserActionType } from '../model/IUserType';\nimport axios from 'axios';\nimport { IAuthActionType } from '../model/IAuthType';\nconst API = process.env.REACT_APP_APP_URL;\n\nconst login = loginForm => async dispatch => {\n  let api = API + `api/auth/login`;\n  dispatch({\n    type: IUserActionType.GET_USER_START\n  });\n  dispatch({\n    type: IAuthActionType.LOGIN_REQUEST\n  });\n\n  try {\n    let userLogin = {\n      email: loginForm.email,\n      password: loginForm.password\n    };\n    await axios({\n      url: api,\n      method: 'POST',\n      data: userLogin\n    }).then(res => {\n      console.log('set user into localstorage ', res.data.id); //localStorage.setItem('user', JSON.stringify(res.data))\n\n      if (userLogin.password === res.data.password) {\n        dispatch({\n          type: IUserActionType.GET_USER_SUCCESS,\n          payload: res.data\n        });\n        dispatch({\n          type: IAuthActionType.LOGIN_SUCCESS,\n          payload: res.data\n        });\n      } else {\n        console.log('password incorrect !');\n        dispatch({\n          type: IAuthActionType.LOGIN_FAILURE\n        });\n        dispatch({\n          type: IUserActionType.GET_USER_ERROR\n        });\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: IUserActionType.GET_USER_ERROR,\n      error: err\n    });\n    dispatch({\n      type: IAuthActionType.LOGIN_FAILURE,\n      error: err\n    });\n  }\n};\n\nconst logout = () => async dispatch => {\n  localStorage.removeItem('user');\n  dispatch({\n    type: IAuthActionType.LOGOUT\n  });\n};\n\nexport { login, logout };","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/Action/UserAction.ts"],"names":["IUserActionType","axios","IAuthActionType","API","process","env","REACT_APP_APP_URL","login","loginForm","dispatch","api","type","GET_USER_START","LOGIN_REQUEST","userLogin","email","password","url","method","data","then","res","console","log","id","GET_USER_SUCCESS","payload","LOGIN_SUCCESS","LOGIN_FAILURE","GET_USER_ERROR","err","error","logout","localStorage","removeItem","LOGOUT"],"mappings":"AACA,SAASA,eAAT,QAAoD,oBAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AAIA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAxB;;AAEA,MAAMC,KAAK,GAAIC,SAAD,IAA2B,MAAMC,QAAN,IAAkC;AAEvE,MAAIC,GAAG,GAAGP,GAAG,GAAI,gBAAjB;AACAM,EAAAA,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAEX,eAAe,CAACY;AAAvB,GAAD,CAAR;AACAH,EAAAA,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAET,eAAe,CAACW;AAAvB,GAAD,CAAR;;AAEA,MAAI;AACA,QAAIC,SAAS,GAAG;AACZC,MAAAA,KAAK,EAAEP,SAAS,CAACO,KADL;AAEZC,MAAAA,QAAQ,EAAER,SAAS,CAACQ;AAFR,KAAhB;AAKA,UAAMf,KAAK,CAAC;AACRgB,MAAAA,GAAG,EAAEP,GADG;AAERQ,MAAAA,MAAM,EAAE,MAFA;AAGRC,MAAAA,IAAI,EAAEL;AAHE,KAAD,CAAL,CAIHM,IAJG,CAKFC,GAAG,IAAI;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA0CF,GAAG,CAACF,IAAJ,CAASK,EAAnD,EADG,CAEH;;AAEA,UAAGV,SAAS,CAACE,QAAV,KAAuBK,GAAG,CAACF,IAAJ,CAASH,QAAnC,EAA4C;AACxCP,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAACX,eAAe,CAACyB,gBAAtB;AACLC,UAAAA,OAAO,EAAEL,GAAG,CAACF;AADR,SAAD,CAAR;AAIAV,QAAAA,QAAQ,CACJ;AAACE,UAAAA,IAAI,EAACT,eAAe,CAACyB,aAAtB;AACAD,UAAAA,OAAO,EAAEL,GAAG,CAACF;AADb,SADI,CAAR;AAIH,OATD,MAUI;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAd,QAAAA,QAAQ,CACJ;AAACE,UAAAA,IAAI,EAAET,eAAe,CAAC0B;AAAvB,SADI,CAAR;AAGAnB,QAAAA,QAAQ,CAAC;AACLE,UAAAA,IAAI,EAAEX,eAAe,CAAC6B;AADjB,SAAD,CAAR;AAGH;AAEJ,KA7BC,CAAN;AA+BH,GArCD,CAqCC,OAAOC,GAAP,EAAY;AAETrB,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEX,eAAe,CAAC6B,cAAvB;AACLE,MAAAA,KAAK,EAAED;AADF,KAAD,CAAR;AAGArB,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAET,eAAe,CAAC0B,aAAvB;AACLG,MAAAA,KAAK,EAAED;AADF,KAAD,CAAR;AAGH;AAEJ,CArDD;;AAuDA,MAAME,MAAM,GAAG,MAAM,MAAMvB,QAAN,IAAkC;AAEnDwB,EAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AAEAzB,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAET,eAAe,CAACiC;AAAxB,GAAD,CAAR;AAEH,CAND;;AAQA,SACI5B,KADJ,EAEIyB,MAFJ","sourcesContent":["import { Dispatch } from 'react'\nimport { IUserActionType, IUserAction, IUser } from '../model/IUserType';\nimport axios from 'axios'\nimport { IAuthActionType } from '../model/IAuthType';\nimport { ILoginForm } from '../model/ILoginForm';\n\n\nconst API = process.env.REACT_APP_APP_URL\n\nconst login = (loginForm: ILoginForm) => async(dispatch: Dispatch<any>) => {\n\n    let api = API + `api/auth/login`\n    dispatch({type: IUserActionType.GET_USER_START})\n    dispatch({type: IAuthActionType.LOGIN_REQUEST})\n    \n    try {\n        let userLogin = {\n            email: loginForm.email,\n            password: loginForm.password\n        }\n\n        await axios({\n            url: api,\n            method: 'POST',\n            data: userLogin\n        }).then(\n            res => {\n                console.log('set user into localstorage ',res.data.id)\n                //localStorage.setItem('user', JSON.stringify(res.data))\n\n                if(userLogin.password === res.data.password){\n                    dispatch({type:IUserActionType.GET_USER_SUCCESS, \n                        payload: res.data\n                    })\n                    \n                    dispatch(\n                        {type:IAuthActionType.LOGIN_SUCCESS,\n                        payload: res.data\n                    })\n                }\n                else{\n                    console.log('password incorrect !')\n                    dispatch(\n                        {type: IAuthActionType.LOGIN_FAILURE}\n                    )\n                    dispatch({\n                        type: IUserActionType.GET_USER_ERROR\n                    })\n                }\n                \n            })\n        \n    }catch (err) {\n\n        dispatch({type: IUserActionType.GET_USER_ERROR,\n            error: err\n        })\n        dispatch({type: IAuthActionType.LOGIN_FAILURE, \n            error: err\n        })\n    }\n\n}\n\nconst logout = () => async(dispatch: Dispatch<any>) => {\n\n    localStorage.removeItem('user')\n\n    dispatch({ type: IAuthActionType.LOGOUT })\n    \n}\n\nexport {\n    login,\n    logout\n}"]},"metadata":{},"sourceType":"module"}