{"ast":null,"code":"import { IEventActionType } from '../model/IEventType';\nimport axios from 'axios';\nimport { resourceLimits } from 'worker_threads';\nconst API = process.env.REACT_APP_APP_URL;\n\nconst getEventList = uid => async dispatch => {\n  if (uid !== undefined) {\n    let api = API + `api/event/${uid}`;\n    dispatch({\n      type: IEventActionType.GET_ALL_EVENT_START\n    });\n\n    try {\n      let result = await axios.get(api);\n      console.log(\"result \", result);\n      dispatch({\n        type: IEventActionType.GET_ALL_EVENT_SUCESS,\n        payload: result.data\n      });\n    } catch (err) {\n      console.log(\"get event list err : \", err);\n      dispatch({\n        type: IEventActionType.GET_ALL_EVENT_ERROR,\n        payload: err\n      });\n    }\n\n    dispatch({\n      type: IEventActionType.GET_ALL_EVENT_END,\n      payload: resourceLimits.data\n    });\n  }\n};\n\nconst getEventDetail = eventId => async dispatch => {\n  let api = API + `api/event/detail/${eventId}`;\n  dispatch({\n    type: IEventActionType.GET_EVENT_DETAIL_START\n  });\n\n  try {\n    let result = await axios.get(api);\n    console.log(\"==> \", result.data);\n    dispatch({\n      type: IEventActionType.GET_EVENT_DETAIL_SUCCESS,\n      payload: result.data\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: IEventActionType.GET_EVENT_DETAIL_ERROR\n    });\n  }\n};\n\nconst addEvent = newEvent => async dispatch => {\n  //window.alert(newEvent.userId)\n  let api = API + `api/event/add`;\n  dispatch({\n    type: IEventActionType.ADD_NEW_EVENT_START\n  });\n\n  try {\n    await axios({\n      url: api,\n      method: 'POST',\n      data: newEvent\n    }).then(res => {\n      //window.alert(res.data)\n      console.log(\"add event \", res.data);\n      dispatch({\n        type: IEventActionType.ADD_NEW_EVENT_SUCESS,\n        payload: res.data\n      });\n      dispatch({\n        type: IEventActionType.ADD_NEW_EVENT_END\n      });\n    });\n  } catch (err) {\n    //window.alert(err)\n    dispatch({\n      type: IEventActionType.ADD_NEW_EVENT_ERROR\n    });\n  }\n};\n\nconst editEvent = (eventId, newEvent) => async dispatch => {\n  let api = API + `api/event/${eventId}`;\n  console.log('++ ', api);\n  dispatch({\n    type: IEventActionType.UPDATE_EVENT_START\n  });\n\n  try {\n    axios({\n      url: api,\n      method: 'PUT',\n      data: newEvent\n    }).then(res => {\n      console.log(\"edit Event\", res.data);\n      dispatch({\n        type: IEventActionType.UPDATE_EVENT_SUCCESS,\n        payload: res.data\n      });\n      dispatch({\n        type: IEventActionType.UPDATE_EVENT_END\n      });\n    });\n  } catch (err) {\n    dispatch({\n      type: IEventActionType.UPDATE_EVENT_ERROR,\n      error: err\n    });\n  }\n};\n\nconst deleteEvent = eventId => async dispatch => {\n  let api = API + `api/event/${eventId}`;\n  dispatch({\n    type: IEventActionType.DELETE_EVENT_START\n  });\n\n  try {\n    axios.delete(api).then(res => {\n      console.log('delete ', res.data);\n      dispatch({\n        type: IEventActionType.DELETE_EVENT_SUCCESS,\n        payload: res.data\n      });\n    });\n  } catch (err) {\n    dispatch({\n      type: IEventActionType.GET_ALL_EVENT_ERROR,\n      payload: err\n    });\n  }\n};\n\nexport { getEventList, getEventDetail, addEvent, editEvent, deleteEvent };","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/Action/EventAction.ts"],"names":["IEventActionType","axios","resourceLimits","API","process","env","REACT_APP_APP_URL","getEventList","uid","dispatch","undefined","api","type","GET_ALL_EVENT_START","result","get","console","log","GET_ALL_EVENT_SUCESS","payload","data","err","GET_ALL_EVENT_ERROR","GET_ALL_EVENT_END","getEventDetail","eventId","GET_EVENT_DETAIL_START","GET_EVENT_DETAIL_SUCCESS","GET_EVENT_DETAIL_ERROR","addEvent","newEvent","ADD_NEW_EVENT_START","url","method","then","res","ADD_NEW_EVENT_SUCESS","ADD_NEW_EVENT_END","ADD_NEW_EVENT_ERROR","editEvent","UPDATE_EVENT_START","UPDATE_EVENT_SUCCESS","UPDATE_EVENT_END","UPDATE_EVENT_ERROR","error","deleteEvent","DELETE_EVENT_START","delete","DELETE_EVENT_SUCCESS"],"mappings":"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","sourcesContent":["import { Dispatch } from 'react'\nimport { IEventActionType, IEventAction, IEvent } from '../model/IEventType'\nimport axios from 'axios'\nimport { resourceLimits } from 'worker_threads'\n\n\nconst API = process.env.REACT_APP_APP_URL\n\n\nconst getEventList = (uid?: string) => async(dispatch: Dispatch<IEventAction>) => {\n    \n    if(uid !== undefined){\n        let api = API + `api/event/${uid}`\n        dispatch({type: IEventActionType.GET_ALL_EVENT_START})\n        \n        try{\n\n            let result:any = await axios.get<any>(api)\n            console.log(\"result \",result)\n\n            dispatch({\n                type: IEventActionType.GET_ALL_EVENT_SUCESS,\n                payload: result.data\n            })\n\n        }\n        catch (err){\n            console.log(\"get event list err : \",err)\n            \n            dispatch({\n                type: IEventActionType.GET_ALL_EVENT_ERROR,\n                payload: err\n            })\n        }\n        \n        dispatch({\n            type: IEventActionType.GET_ALL_EVENT_END,\n            payload: resourceLimits.data\n        })\n    }\n    \n    \n}\n\nconst getEventDetail = (eventId: number) => async(dispatch: Dispatch<IEventAction>) => {\n    \n    let api = API + `api/event/detail/${eventId}`\n    dispatch({\n        type: IEventActionType.GET_EVENT_DETAIL_START})\n\n    try{\n\n        let result:any = await axios.get<any>(api)\n        console.log(\"==> \",result.data)\n\n        dispatch({\n            type: IEventActionType.GET_EVENT_DETAIL_SUCCESS,\n            payload: result.data\n        })\n\n    }\n    catch(err){\n        console.log(err)\n        dispatch({\n            type: IEventActionType.GET_EVENT_DETAIL_ERROR\n        })\n    }\n}\n\nconst addEvent = (newEvent: IEvent) => async(dispatch: any) => {\n    \n    //window.alert(newEvent.userId)\n    let api = API + `api/event/add`\n    dispatch({ type:IEventActionType.ADD_NEW_EVENT_START})\n\n\n    try{\n        await axios({\n            url: api,\n            method: 'POST',\n            data: newEvent\n        }).then(res => {\n\n            //window.alert(res.data)\n            console.log(\"add event \",res.data)\n\n            dispatch({\n                type: IEventActionType.ADD_NEW_EVENT_SUCESS,\n                payload: res.data,\n            })\n\n            dispatch({type: IEventActionType.ADD_NEW_EVENT_END})\n        })\n    }\n    catch(err){\n\n        //window.alert(err)\n        dispatch({\n            type: IEventActionType.ADD_NEW_EVENT_ERROR\n        })\n    }\n}\n\nconst editEvent = (eventId: number,newEvent: IEvent) => async(dispatch: any) => {\n    let api = API + `api/event/${eventId}`\n    console.log('++ ',api)\n    dispatch({ type: IEventActionType.UPDATE_EVENT_START })\n    \n    try{\n        axios({\n            url:api,\n            method: 'PUT',\n            data: newEvent\n        }).then(res => {\n            console.log(\"edit Event\", res.data)\n\n            dispatch({\n                type: IEventActionType.UPDATE_EVENT_SUCCESS,\n                payload: res.data\n            })\n\n            dispatch({type: IEventActionType.UPDATE_EVENT_END})\n        })\n    }\n    catch(err){\n        dispatch({\n            type: IEventActionType.UPDATE_EVENT_ERROR,\n            error: err\n        })\n    }\n}\n\n\nconst deleteEvent = (eventId: number) => async(dispatch: any) => {\n    let api = API + `api/event/${eventId}`\n    dispatch({ type: IEventActionType.DELETE_EVENT_START })\n    \n    try{\n        axios.delete(api)\n        .then(res => {\n            console.log('delete ', res.data)\n            dispatch({\n                type: IEventActionType.DELETE_EVENT_SUCCESS,\n                payload: res.data\n            })\n        })\n    }\n    catch(err){\n        dispatch({\n            type: IEventActionType.GET_ALL_EVENT_ERROR,\n            payload: err\n        })\n    }\n}\n\nexport {\n    getEventList,\n    getEventDetail,\n    addEvent,\n    editEvent,\n    deleteEvent\n}\n\n"]},"metadata":{},"sourceType":"module"}