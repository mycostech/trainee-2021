{"ast":null,"code":"import { IUserActionType } from '../model/IUserType';\nimport axios from 'axios';\nimport { IAuthActionType } from '../model/IAuthType';\nconst API = process.env.REACT_APP_APP_URL;\n\nconst register = registerForm => async dispatch => {\n  let api = API + `api/auth/register`;\n  dispatch({\n    type: IUserActionType.ADD_USER_START\n  });\n\n  try {\n    let userRegister = {\n      fname: registerForm.fname,\n      lname: registerForm.lname,\n      nickname: registerForm.nickname,\n      email: registerForm.email,\n      password: registerForm.password,\n      birthdate: registerForm.birthdate,\n      imageFile: registerForm.imageFile\n    };\n    await axios({\n      url: api,\n      method: 'P'\n    });\n  } catch (err) {}\n};\n\nconst login = loginForm => async dispatch => {\n  let api = API + `api/auth/login`;\n  dispatch({\n    type: IUserActionType.GET_USER_START\n  });\n  dispatch({\n    type: IAuthActionType.LOGIN_REQUEST\n  });\n\n  try {\n    let userLogin = {\n      email: loginForm.email,\n      password: loginForm.password\n    };\n    await axios({\n      url: api,\n      method: 'POST',\n      data: userLogin\n    }).then(res => {\n      dispatch({\n        type: IUserActionType.GET_USER_SUCCESS,\n        payload: res.data\n      });\n      dispatch({\n        type: IAuthActionType.LOGIN_SUCCESS,\n        payload: res.data\n      });\n    });\n  } catch (err) {\n    dispatch({\n      type: IUserActionType.GET_USER_ERROR,\n      error: err\n    });\n    dispatch({\n      type: IAuthActionType.LOGIN_FAILURE,\n      error: err\n    });\n    window.alert('email or password incorrect');\n  }\n};\n\nconst logout = () => async dispatch => {\n  if (window.confirm('logout')) {\n    dispatch({\n      type: IAuthActionType.LOGOUT\n    });\n    dispatch({\n      type: IUserActionType.GET_USER_ERROR\n    });\n  }\n};\n\nexport { login, logout };","map":{"version":3,"sources":["/Users/macbook/Document/Mycos-trainee/5_Frontend/react-diaryApp/src/Action/UserAction.ts"],"names":["IUserActionType","axios","IAuthActionType","API","process","env","REACT_APP_APP_URL","register","registerForm","dispatch","api","type","ADD_USER_START","userRegister","fname","lname","nickname","email","password","birthdate","imageFile","url","method","err","login","loginForm","GET_USER_START","LOGIN_REQUEST","userLogin","data","then","res","GET_USER_SUCCESS","payload","LOGIN_SUCCESS","GET_USER_ERROR","error","LOGIN_FAILURE","window","alert","logout","confirm","LOGOUT"],"mappings":"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","sourcesContent":["import { Dispatch } from 'react'\nimport { IUserActionType, IUserAction, IUser } from '../model/IUserType';\nimport axios from 'axios'\nimport { IAuthActionType } from '../model/IAuthType';\nimport { ILoginForm } from '../model/ILoginForm';\nimport { IRegisterForm } from '../model/IRegisterForm';\n\n\nconst API = process.env.REACT_APP_APP_URL\n\nconst register = (registerForm: IRegisterForm) => async(dispatch: Dispatch<any>) => {\n\n    let api = API + `api/auth/register`\n    dispatch({ type: IUserActionType.ADD_USER_START })\n    \n    try{    \n        let userRegister: IRegisterForm = {\n            fname: registerForm.fname,\n            lname: registerForm.lname,\n            nickname: registerForm.nickname,\n            email: registerForm.email,\n            password: registerForm.password,\n            birthdate: registerForm.birthdate,\n            imageFile: registerForm.imageFile\n        }\n\n        await axios({\n            url: api,\n            method: 'P'\n        })\n    }\n    catch(err){\n\n    }\n}\n\nconst login = (loginForm: ILoginForm) => async(dispatch: Dispatch<any>) => {\n\n    let api = API + `api/auth/login`\n    dispatch({type: IUserActionType.GET_USER_START})\n    dispatch({type: IAuthActionType.LOGIN_REQUEST})\n    \n    try {\n        let userLogin: ILoginForm = {\n            email: loginForm.email,\n            password: loginForm.password\n        }\n\n        await axios({\n            url: api,\n            method: 'POST',\n            data: userLogin\n        }).then(\n            res => {\n                \n                dispatch({type:IUserActionType.GET_USER_SUCCESS, \n                    payload: res.data\n                })\n                \n                dispatch(\n                    {type:IAuthActionType.LOGIN_SUCCESS,\n                    payload: res.data\n                })\n                \n            })\n        \n    }catch (err) {\n\n        dispatch({type: IUserActionType.GET_USER_ERROR,\n            error: err\n        })\n        dispatch({type: IAuthActionType.LOGIN_FAILURE, \n            error: err\n        })\n        window.alert('email or password incorrect')\n    }\n\n}\n\nconst logout = () => async(dispatch: Dispatch<any>) => {\n\n    if(window.confirm('logout')){\n        dispatch({ type: IAuthActionType.LOGOUT })\n        dispatch({ type: IUserActionType.GET_USER_ERROR })\n    }\n    \n}\n\nexport {\n    login,\n    logout\n}"]},"metadata":{},"sourceType":"module"}